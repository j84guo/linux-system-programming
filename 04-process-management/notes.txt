Processes:
After files, processes are the most fundamental abstraction in a Unix system.
As object code in execution (running programs) they include assembly language,
data, resources, state and a virtualized computer. Unix seperates the creation
of a new process from the act of loating a binary image, i.e. the fork and exec
system calls.

Programs, Processes and Threads:
A binary is compiled, executable code stored on disk, e.g. /bin/ls. A process
is a running program, which means the binary loaded into memory, virtualized
memory, kernel resources (e.g. open files), a security context (e.g. associated
user) and >= 1 threads. A thread is the unit of activity within a process, each
has its own virtualized processor which includes a stack, processor state (e.g.
registers) and an instruction pointer. As memory virtualization is associated
with a process, threads share the same memory address space.

Process ID:
Each process a unique identifier, its PID, which is unique at any single point
in time. From the view of a process, its PID never changes, and generally
programs assume that the kernel does not readily reuse PID's.

The idle process, run by the kernel when there are no other runnable processes,
has PID 0. The first process run by the kernel after booting the system, init,
has PID 1. Note init refers to both the initial process the kernel runs and the
specific program. Unless the user tells the kernel which init to run, the
kernel tries four executable in order: /sbin/init, /etc/init, /bin/init,
/bin/sh, halting with a panic if all fail. After handoff from the kernel, init
handles the remaining boot, typically initializing the system, starting
services and launching a login program.

1) PID Allocation
The kernel imposes a default max PID of 32768. This is for compatibility with
older Unix systems, which use signed 16 bit types for PID's. Sysadmin's may set
a higher value via /proc/sys/kernel/pid_max. PID allocation occurs in a
strictly linear fashion. The kernel does not re-use values until it wraps
around the top, providing short term comfort in PID stability and uniqueness.
Therefore, If PID 17 is the highest currently allocated PID, the next will be
18, regardless of wither the process with PID 17 is still running.

2) Process Hierarchy
A process which spawns another is knows as the parent, and the new process as
the child. Every process has one parent (except init) indicated by its parent
process id, PPID.

Each process is owned by a user and group, determining access rights to 
resources. Each child inherits is parent's user and group ownership. Note that
users and groups are integers to the kernel, their mapping to human readable
names is stored in /etc/passwd and /etc/group.

Each process is also part of a process group. Children normally belong to their
parent gorup. In addition, shell pipelines, e.g. ls | less, run commands in the
same process group. Groups make it easy to send signals or retrieve information
with an entire pipeline, as in shell job control.

3) pid_t
Processes in C are represented by the pid_t type, defined in <sys/types.h>. The
backing C type is architecture specific, on Linux it is typedef to int.

4) Obtaining PID and PPID

#include <sys/types.h>
#include <unistd.h>

// PID of invoking process
pid_t getpid();

// PPID
pid_t getppid();

// neither call can return an error, making usage simple
printf("my pid=%jd\n", (intmax_t) getpid());
printf("parent pid=%jd\n", (intmax_t) getppid());

Running a New Process:
Again, Unix seperates loading a program into memory and executing it from
creation of a process. One system call, exec, loads the binary into memory,
replacing the previous contents of the address space and begins execution of
the new program. A different system call, fork, is used to create a process,
which starts as a near-duplicate of its parent. Therefore, fork and exec start
a new program in a new process.

1) exec
Rather than a single exec function, there is a family built on a single system
call.

#include <unistd.h>

/*
* replaces the current process image by loading the program at path
* the signature is variadic, each arg is passed to the program
* note the list must be null terminated
*/
int execl(const char *path, const char *arg, ...);

/*
* e.g. executing /bin/vi, note that by convention, shells put the basename of
* the path into the first argument, in many cases multiple hardlinks (inode
* with different directory entries mapped to them), and the binary has
* different behaviour based on the name passed in
*/
#include <unistd.h>
#include <stdio.h> 

int ret = execl("/use/bin/vim", "vim", "notes.txt", NULL);
if(ret == -1) perror("execl");

Normally, execl doesn not return, as execution begins with the newly loaded
prgram and the old program simply does not exist any more in the process
address space. On error, execl() returns -1 and sets errno.

Successfull invocation changes not only the address space but also:
-pending signals are lost
-signals that the process is catching are returned to their default behaviour
 since the original handlers don't exist anymore
-memory locks are dropped
-thread attributes are mostly defaulted
-thread statistics are mostly reset
-anything relating to the process' address space, including mapped files, is
 cleared
-anything that exists solely in user space, including features of the C
 library such as atexit(), is cleared

Some properties do not change, for example the PID, PPID, priority. Normally,
open files are also inherited accross an exec. Newly executed processes can
therefore access open files, assuming the file descriptors are known. This is
often not desired, best practice is to close files before exec, and it is also
possible to instruct the kernel to do so via fcntl.

Other exec Calls:

#include <unistd.h>

/*
* mnemonics:
* l and v indicate whether arguments are passed in a list or array (vector)
* p denotes that the user's path is searched for the file, therefore p variants
* only need to specify  a file name
* e means that a new environment is supplied for the new process
*
* notes:
* processes inehrit their environment variables via exec calls, see man execve 
* const applies to the type on its left, unless it is on the extreme left, in
* which case it applies to the immediate right, so int const * is a pointer to
* constant integer, while int * const, is a constant pointer to an integer
*/

// argument list, look for file in path
int execlp(const char *file, const char *arg, ...);

// argument array, create new environment
int execle(const char *path, const char *arg, ..., char *const envp[]);

// argument array
int execv(const char *path, char *const argv[]);

// argument array, look for file in path
int execvp(const char *path, char *const argv[]);

// argument array, create new environment
int execve(const char *file, char *const argv[], char *const envp[]);

Although there is no technical reason for the omission, the exec family has no
members which searches path and provides a new environment. This is probably
because p variants were intended for use by shells, and shell executed
processes generally inherit their environments from the shell.

/*
* e.g. executing vim via execlp()
*/
#include <unistd.h>
#include <stdio.h> 

int ret = execlp("vim", "vim", "notes.txt", NULL);
if(ret == -1) perror("execlp");

Set group id and set user id programs (processes which run as the binary owner
as opposed to the invoker) should never invoke the shell. Doing so opens a
security hole as the invoking user may set environment variables to manipulate
shell behaviour, e.g. path injection, where the attacker modifies the path to
execute a binary of their choosing, allowing the attacker to run any binary
using the privilleges of the set group id or set user id program.

With the array must be NULL terminated in v variants. 

/*
* e.g. executing git status via execv
*/
#include <unistd.h>
#include <stdio.h>

char *const args = {"git", "status", NULL};
int ret = execv("/usr/bin/git", args);
if(ret == -1) perror("execv");

In Linux, only one member of the exec family is a system call, execve(). This
is because variadic system calls would be difficult to implement and
environment variable only have meaning in user space.

Errors:
On success, exec calls do not return. On error, they return -1 and set errono.
E2BIG - too many bytes in the argument list or environment
EACCESS - process lacks search perimissions for a component in path, the target
          binary is not marked executable, the file system on which file is
          resides is mounted noexec.
EFAULT - invalid pointer
EIO - low level IO error (bad)
EISDIR - the binary or the interpreter is a directory
ELOOP - system encountered too many symbolic links resolving path
EMFILE - invoking process has reached its limit on open files
ENFILE - system wide limit on open files has been reached
ENOENT - target path or binary does not exist, or a shared library does not
ENOEXEC - target binary is invalid or intended for a different architecture
ENOMEM - kernel does not have enough memory for a new program
ENOTDIR - non final component of path is not a directory
EPERM - the filesystem on which path or file resides is mounted nosuid, the
        user is not root and path or file has the suid or sgid bit set 
ETXTBSY - the target path or file is open for writing by another process

2) fork
A new process running the same image as the current one can be created via the
fork() system call.

#include <sys/types.h>
#include <unistd.h>

pid_t fork();

Successful invocation creates a new process, mostly identical to the parent.
Both processes continue to run from fork() as if nothing special happened, note
the parent gets the child PID while the child gets 0 returned.

The parent and child are mostly identical, except in the following ways:
-the child PID is newly allocated
-the child's PPID is set to the parent's PID
-resource statistics are zeroed for the child
-pending signals are cleared and not inherited by the child
-file locks are not inherited by the child

On error, a child is not created and the call returns -1, setting errno.
EAGAIN - kernel failed to allocate resources, e.g. PID or the RLIMIT_NPROC
         resource limit was reached
ENOMEM - insufficient kernel memory was available

/*
 * e.g. usage of fork()
 */
#include <sys/types.h>
#include <unistd.h>
#include <sys/types.h>

pid_t pid = fork();

if(pid > 0)
    printf("parent: created child %d\n", pid);
else if(pid == 0)
    printf("child: running")
else
    perror("fork")

Common usage of fork() is to create a child which in turn loads a new binary
via exec(), e.g. a shell running a program for the user.

/*
 * e.g. spawn a child and run /bin/ls
 */ 
pid_t pid = fork();

if(pid == -1)
{
    perror("fork")
}
else if(pid == 0)
{
    const char* args[] = {"ls", NULL};
    int ret = execv("/bin/ls", args);
    if(ret == -1)
    {
        perror("execv");
        exit(1);
    }
}

Copy on Write:
In early Unix systems, forking was simple. The kernel would create copies of
all internal data structures, duplicated the process' page table entries and
performed a page-by-page copy of the parent's address space into the child's
new address space. Unfortunately, this page-by-page copy is time-consuming.
Modern Unix systems are smarter. Instead of wholesale copy of the parent's
address space, Linux employs copy on write pages.

Copy on write pages is a lazy optimization strategy desgined to mitigate the
overhead of duplicating resources. If multiple consumers request read access to
their own copies of a resource, duplicates do not need to be made, instead they
each get a pointer to the resource and the illusion of exclusive access remains
as long as they only read. If a consumer attempts to modify a resource, it is
duplicated and the new copy is given to that consumer. Other consumers continue
to share the original resource copy. Hence copy only occurs on write.

In general, the advantage of lazy algorithms is to defer expensive operations
until the last possible moment, in this case a copy is never needed until a
consumer wants to modify a resource.

In the specific case of virtual memory, copy on write occurs on a page by page
basis. As long as a process does not modify all the pages in its address space,
a full copy of the parent address space is not needed. After fork() both parent
and child believe they have a unique address space, while in fact they are
sharing the parent's original pages, which may be shared by other parent's and
children.

The kernel implementation is simple, pages are marked read only, and as copy on
write in the kernel's page data structures. If either process attempts to
modify a page, a page fault occurs. The kernel handles the fault by
transparently making a copy. The copy-on-write attribute is cleared and it is
no longer shared. Modern machine architectures provide hardware level support
for copy on write.

Finally, since fork() is often followd by an exec*(), copy on write prevents
unnecessarily copying over the parent's address space only to overwrite it.

vfork():
Before copy on write pages, Unix designers were concerned with wasteful address
space copying furing fork() + exec*(), so they introduced vfork() system call.

#include <sys/types.h>
#include <unistd.h>

/*
 * Successfull invocation behaves like fork() except the child must immediately
 * issue a successfull call to an exec*() ot _exit(). This system call avoids
 * address space and page table copies by suspending the parent process until
 * the child terminates or loads a new binary image. In the interim both share,
 * without copy on write semantics, their address space and page table entries.
 * In fact, the only work done by vfork() is duplicating internel kernel data
 * structures, so the child should not modify any memory in its address space.
 * vfork() is faster than fork() even with copy on write since page table
 * entries do not have to be copied.
 *
 * Warning: vfork() is considered a relic and fork() is almost always better.
 * Consider if a child fails to exec*(), the parent would suspend indefinitely.
 */
pid_t vfork();

Terminating a Process:
#include <stdlib.h>

/*
 * defined by POSIX and C89
 */
void exit(int status);

This call performs basic shutdown steps, then instructs the kernel to terminate
the process. It does not return any error, or return at all. Status denotes the
process exit code, which can be checked by other programs like the shell.
Typically, 0 means success and 1 or -1 failure. EXIT_SUCCESS and EXIT_FAILURE
are defined as portable ways to represent these.

Before termination, the C library performs the following:
-Call any functions registered with atexit() or on_exit() in the reverse order
 of registration.
-Flush all open stdio streams.
-Remove temporary files created with tmpfile().

The system call _exit() is finally invoked by exit() to let the kernel handle
the rest of the termination process.

#include <unistd.h>

/*
 * The kernel cleans up resources associated with a process that are no longer
 * in use. This may include allocated memory, open files, System V semaphores.
 * After cleanup, the kernel destroys the process and notifies the parent of
 * its child's demise.
 */
void _exit(int status);

Applications may call _exit() directly, but most need the cleanup by exit().

#include <stdlib.h>

/*
 * In a redundant stroke of redundancy, the ISO C99 standard added _Exit()
 * which is identical to _exit().
 */
void _Exit(int status);

The classic way to end a program is not via a explicit system call, but by
returning form the main function., the compiler inserts an implicit call to
exit(). It is good coding practice to explicitly return an exit status either
via exit() or return in main().

A process may also terminate if it receives a signal whose default action is to
terminate the process. Such signals include SIGTERM and SIGKILL.

A final way to end a process; execution is by incurring the wrath of the
kernel, which can kill a process for executing an illegal instruction, causing
a segmentation fault, running out of memory, consuming too many resources, etc.

atexit():
POSIX defines the atexit() library call, used to register functions to be
called upon process termination.

#include <stdlib.h>

int atexit(void (*func)());

Sucessful invocation register the function pointer to run during normal program
termination (exit() or return from main()). After exec*(), the list of
registered functions is cleared, as they don't exist in the new process address
space. The argument must be a pointer to a function which takes no arguments
and returs nothing (i.e. void func();). Functions are invoked in the reverse
order they are registered in (stack). Registered functions must not call exit()
as that will cause infinite recursion. Even _exit() in a handler is not
recommended, as other shutdown steps may be skipped.

POSIX required atexit() to support at least ATEXIT_MAX >= 32 handlers.

/*
 * The exact max may be optained via sysconf().
 */
long max = sysconf(_SC_ATEXIT_MAX);
printf("%ld\n", max);

On success, ateixt() returns 0, on error, -1.

#include <stdio.h>
#include <stdlib.h>

void out()
{
    printf("atexit() succeeded");
}

int main()
{
    if(atexit(out))
        fprintf(stderr, "atexit() failed")
}

on_exit():
Linux glibc also supports on_exit(), which is similar to atexit() but takes a
function pointer with a different prototype.

#include <stdlib.h>

/*
 * Warning: non-standard.
 */
int on_exit(void (*func)(int, void *), void *arg);

e.g.
int handler(int status, void *arg);

SIGCHLD:
When a child terminates, its parent receives a signal SIGCHLD from the kernel.
By default, this signal is ignored. Processes can handle it via signal() or
sigaction() calls. SIGCHLD may be generated at any time, as child demise is
asynchronous with respect to the parent. A parent may also explicitly wait for
the child to die, i.e. waiting.

Waiting for Terminated Child Processes:
Parents may want to obtain information about their child's termination, like
exit status. If the child were to entirely disappear when terminated, no info
would be left for the parent. Therefore children who die before their parent
are put in a zomibe state, where some kernel data structures containing
potentially usefule data are retained. A zombie waits for its parent to inquire
about its status (aka. waiting). After the parent obtains the zombie's info
the zombie formally exists and ceases to exist.

#include <sys/types.h>
#include <sys/wait.h>

/*
 * POSIX defines wait() for obtaining info on terminated children.
 */
pid_t wait(int *status);

A call to wait() returns the pid of the terminated child, or -1 on error. If no
child has terminated, it blocks, if a child has already terminated it returns
immediately. Consequently, wait() upon SIGCHLD will not block.

Errors:
ECHILD - the calling process does not have children
EINTR - a signal was received while waiting and the call returned early

If not NULL, the status pointer contains information about the child. POSIX
allows implementations to define the bits in status as they see fit, so there
are a family of macros for interpreting the parameter.

#include <sys/wait.h>

int WIFEXITED(status);
int WIFSIGNALED(status);
int WIFSTOPPED(status);
int WIFCONTINUED(status);

int WEXITSTATUS(status);
int WTERMSIG(status);
int WSTOPSIG(status);
int WCOREDUMP(status);

Either of the first two macros may return true (non-zero) depending on how the
process terminated. The first stands for normal termination (_exit()) and the
macro WEXITSTAUS retrieves the low-order 8 bits passed to _exit().

The second stands for signal caused termination, WTERMSIG returns the signal
number which caused it and WCOREDUMP returns true if the child dumped core in
reponse to the signal. (WCOREDUMP is not POSIX but exists on many Unices.)

WIFSTOPPED and WIFCONTINUED return true if the process was stopped or
continued, and is currently being replaced by the ptrace() system call. These
conditions are generally only applicable when implementing a debugger or job
control with waitpid(). If WIFSTOPPED is true, WSTOPSIG retrieves the signal
which caused the stop.

/*
 * e.g. wait() on a child
 */ 

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>

int main()
{
    int status;
    pid_t pid;

    if(fork() == 0)
        // signal 6
        // abort();
        return 0;

    pid = wait(&status);

    if(pid == -1)
        perror("wait");

    printf("pid=%d\n", pid);

    if(WIFEXITED(status))
        printf("exit status: %d\n", WEXITSTATUS(status));

    if(WIFSIGNALED(status))
        printf("killed by signal: %d\n", WTERMSIG(status));

    if(WIFSTOPPED(status))
        printf("stopped by signal: %d\n", WSTOPSIG(status));

    if(WIFCONTINUED(status))
        printf("continued\n");

    return 0;
}

Waiting for a Specific Process:
Often a process has multiple children and does not wish to wait for all of
them, but rather a specific child. A clumsy approach is to repeatedly call wait
and checkt the returned pid. We can use the system call waitpid() to wait on a
particular child.

#include <sys/types.h>
#include <sys/wait.h>

/*
 * waitpid() is more powerful than wait(), taking additional options
 *
 * pid: specifies which process to wait for, its value can be < -1 (wait for
 *      any child whose process group id is equal to the absolute value), -1
 *      (wait for any child, like wait()), 0 (wait for children in the same
 *      process group as the calling process) or > 0 (wait for any child
 *      process whose pid is exactly the value provided)
 *
 * status: stores child info on return
 *
 * options: binary OR of zero or more options
 * WNOHANG - no block
 * WUNTRACED - WIFSTOPPED bit in returned status is set even if the calling
 *             process is not tracing the child (shell job controll)
 * WCONTINUED - WIFCONTINUED bit in returned status is set even if the calling
 *              process is not tracing the child (shell)
 *
 * the following are equivalent:
 * wait(&status);
 * waitpid(-1, &status, 0);
 */
pid_t waitpid(pid_t pid, int *status, int options);

/*
 * e.g. wait with WNOHANG
 */

int status;
pit_t pid = waitpid(1742, &status, WNOHANG);

if(pid == -1)
{
    perror("waitpid");
}
else
{
    printf("pid=%d\n", pid);

    if(WIFEXITED(status))
        printf("exit: %d\n", WEXITSTATUS(status));

    if(WIFSIGNALLED(status))
        printf("killed by signal: %d\n", WTERMSIGNAL(status));
}

Launching and Waiting for a New Process:
Both ANSI C and POSIX define an interface coupling spawning a process and
waiting for its termination, think of it as synchronous process creation. This
system call is useful when a subprocess is made and immediately waited upon.

#define _XOPEN_SOURCE /* if we want WEXITSTATUS, etc. */
#include <stdlib.h>

/*
 * The call is named system because synchronous process creation is also called
 * shelling out to the system. It is common to use system() to run a simple
 * utility or shell script often with the goal of retrieving its return value.
 * 
 * A call to system() invokes the command string, which includes the executable
 * and any arguments. The string is appended to /bin/sh -c, i.e. passed to the
 * shell wholesale.
 */
int system (const char *command);

On success, the return value is the status as returned by wait(), meaning the
process exit code can be retrieved using WEXITSTATUS. On error, calls return
-1. Note that if /bin/sh itself failed, the return value of WEXITSTATUS is the
same as exit(127), but since programs may also return that, there is no sure
way to tell if /bin/sh failed or not.

If command is NULL, system() returns a non-zero value if /bin/sh is available
and 0 otherwise.

During execution, SIGCHLD is blocked, SIGINT and SIGQUIT are ignored. Ignoring
SIGINT and SIGQUIT has several implication, particularly if system() is invoked
in a loop, in which case you should check the child exit status.

/*
 * e.g. system() in a loop
 */    
do
{
    int ret = system("git status");
        
    if(WIFSIGNALLED(ret) && (WTERMSIG(ret) == SIGINT) || (WTERMSIG(ret) == SIGQUIT))
        break; // handle
} while(1);

Implementing system() using fork() and exec*() is a useful exercise.

#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>

/*
 * synchronously spawns and waits for the command /bin/sh -c <cmd>
 * returns -1 for any error, otherwise the exit code of the command
 * does not ignore signals
 */
int my_system(const char *cmd)
{
    int status;

    pid_t pid = fork();
    
    if(pid == -1)
    {
        return -1;
    }
    else if(pid == 0)
    {
        const char *argv[4];
        argv[0] = "sh";
        argv[1] = "-c";
        argv[2] = cmd;
        argv[3] = NULL;

        execv("/bin/sh", argv);
        
        // if execv returns, it is -1 and indicates an error
        exit(-1);
    }

    if(waitpid(pid, &status, 0) == -1)
        return -1;
    else if(WIFEXITED(status))
        return WEXITSTATUS(status);
    
    // -1 is returned if the process is stopped by a signal
    return -1;
}

int main()
{
    printf("%d\n", my_system("git status"));    
}

Zombie:
A process which has terminated but has not yet been waited upon by its parent
is called a zombie. Zombies continue to consume some system resources (kernel
data structures) allowing their parent to lookup their exit information. Once
that occurs, the kernel removes the processes for good.

Sometimes zombie processes stick around, due to irresponsible parents. If your
application forks a child process, it is its responsibility to wait on the
child, even if it merely discards the information gleaned. Otherwise, children
live on, hogging PID's and some kernel memory.

If a zombie's parent dies before its child or waiting on its child, the kernel
walks the parent's children and reparent's then to the init process,
guaranteeing that no process is ever without an immediate parent. Init
periodically waits on its children, ensuring none of the remain zombies.
Although waiting is still considered good practice, short lived parents may
safely exit knowing that their children will be re-parented by init.

Users and Groups:
Processes are associated with users and groups. The user and group id's are
numeric values represented by the C types uid_t and gid_t, respectively.
Mapping between numbers and names happens in userspace using the files
/etc/passwd and /etc/group, but the kernel only deals with the numbers.

User and group ids determine the operations a process may perform. Generally,
the least privilleged rights required to do the process' work should be used.
This requirement is dynamic, so a process may change its user/group id's, e.g.
dropping root access after a one time operation.

Real, Effective and Saved User/Group Ids:
There are 3 uids associated with a process. (And 1 Linux-specific the file
system uid)

Real uid - User who originally ran the process. It is set to the real uid of
           the process parent and does not change during an exec call. Normally
           the login process sets the real uid of the user's login shell to
           that user. Only the superuser can change this value.

Effective uid - User that the process currently executes as. permission checks
                are performed against this user id. Inherits the effective uid
                of its parent, which is generally equal to the real uid.
                Executing a setuid binary during an exec call causes the
                process to set its effective uid to the binary's owner. For
                instance, executing /usr/bin/passwd causes a process to gain
                root effective uid, since root owns that setuid binary. The 
                superuser may set this value to anythin, non-privilleged users
                may set it to the real uid or the saved uid.

Saved uid - Process' original effective uid. After a fork, the child inherits
            the saved uid of its parent. Upon exec, the kernel sets the saved
            uid to the original effective uid. Only the superuser may change
            this value.

The euid is what determines a process' access rights, ruid and suid are other
options a non-privilleged user may set the euid to.

Changing Real or Saved User/Group Ids:
#include <sys/types.h>
#include <unistd.h>

/*
 * sets the euid of the current process
 *
 * if the current euid is 0 (root) then the ruid and suid are also set to any
 * specified value
 *
 * a non-root user may only provide the ruid or suid as argument
 *
 * returns 0 on success, -1 on error and sets errno
 * EAGAIN - uid is different from the ruid and setting the ruid to uid will put
 *          the user over RLIM_NPROC, the number of processes a user may own
 * EPERM - non-root euid passed an argument that is neither the ruid or suid
 */
int setuid(uid_t uid);

/*
 * same as setuid() except for group ids
 */
int setgid(gid_t gid);

Changing the Effective User Id:

#include <sys/types.h>
#include <unistd.h>

/*
 * sets only the euid, returns 0 on success, -1 on failure, setting errno to
 * EPERM if a non-root user tries an invalid value
 *
 * in the non-root case, behaves the same as setuid(), the root may set euid to
 * any value
 *
 * tip:
 * non-root processes should use seteuid and root processes should use setuid
 */
int seteuid(uid_t uid);

/*
 * same as setuid(), except for group ids
 */
int setegid(git_t gid);

Obtaining User and Group Ids:

#include <sys/types.h>
#include <unistd.h>

/*
 * real
 */
uid_t getuid();
gid_t getgid();

/*
 * effective
 */
uid_t geteuid();
gid_t getegid();

These system calls cannot fail.

Sessions and Process Groups:
Each process is part of a process group, a collection of processes associated
with each other for the purpose of job control. The primary attribute of a
process group is that signals may be sent to all processes in the group, e.g.
terminate, start, stop. 

Each process group has a process groupd id (pgid) and a process group leader.
The pgid is equal to the leader's pid. Process groups exist as long as the have
one surviving member, i.e. the groups exists even if the leader dies. 

When a user logs into a machine, the login process creates a new session that
consists of a single process, the user's login shell, which acts as the session
leader. The pid of the session leader is the session id. A session is a
collection of process groups, they associate a user's activities with a
controlling terminal, a specific tty device which handles the user's I/O.
Consequently, sessions are largely the business of shells. 

While process groups are a mechanism for signalling multiple processes at once,
making job control possible, sessions exist to consolidate a user's processes
around a controlling terminal. Process groups in a session are divided between
a single foreground process group and >= 0 background process groups. When a
user exits a terminal, SIGQUIT is sent to the foreground group, when a network
disconnect is detected by the terminal, SIGHUP is sent to the foreground group,
when a user enters the interrupt key (ctrl-C) SIGINT is sent to the foreground
group.

A command such as cat data.txt | grep key | sort results in 1 process group
with 3 members. Since there is no trailing &, this is the foreground process
group.

Session System Calls:
Shells create a new session on login via the setsid() system call.

#include <unistd.h>

/*
 * Creates a new session and process group, setting the current process as the
 * leader and sole member of both, the pid is used as the pgid and sid.
 * 
 * The process must not already be a process group leader (since the pgid and
 * possible sid will already have been taken).
 *
 * On success, returns the sid, on error -1 and sets errno.
 * EPERM - process is alread a process group leader
 *
 * One way to ensure that a given process is not a process group leader is to
 * fork, then call setsid in the child.
 */
pid_t setsid();

/*
 * e.g. fork and setsid
 */
pid_t pid = fork();

if(pid == -1)
{
    perror("fork");
    return -1;
}
else if(pid != 0)
{
    exit(0);
}

if(setsid() == -1)
{
    perror("setsid");
    return -1;
}

Daemons create their own session to detach from a controlling terminal. Shells
create a new session for each login.

/*
 * obtains the session id of process with pid
 *
 * if pid is 0, the current proces is used, returns -1 on error
 * ESRCH - invalid pid
 */
pid_t getsid(pid_t pid);

/*
 * e.g. get session id
 */
pid_t sid = getsid(0);

if(sid == -1)
{
    perror("getsid"); // should not be posssible
}
else
{
    printf("session id=%d\n", sid);
}

Process Group System Calls:
A call to setpgid() sets the pgid of the process with pid to pgid.

#include <unistd.h>
#include <sys/types.h>

/*
 * if pid is zero, the current process is used
 * if pgid is zero, pid is used (e.g. set the pgid to the pid)
 *
 * returns 0 on success, which depends on several conditions
 * -process identified by pid must be the calling process, or a child of the
 *  calling process that has not issued an exec call and is in the same session
 *  as the calling process
 * -the process with pid must not be a session leader
 * -if pgid already exists, it must be in the same session as the calling
 *  process
 * -pgid must be non-negative
 *
 * returns -1 on failure, setting errno
 * EACCESS - the process with pid is a child of the calling process which has
 *           already invoked exec
 * EINVAL - pgid < 0
 * EPERM - process with pid is a session leader or is in a different session
 *         then the calling process, alternatively an attempt was made to move
 *         a process into a process group in a different session
 * ESRCH - pid is not the current process, 0 or a child of the current process
 * ESRCH
 */
int setpgid(pid_t pid, pid_t pgid);

/*
 * obtaining the process group id
 * if pid is zero, the current process' pgid is returned
 *
 * returns -1 on error and sets errno to ESRCH, indicating invalid pid
 */
pid_t getpgid(pid_t pid);

Daemons:
A daemon is process which runs in the background, unconnected to any
uncontrolling terminal. Daemons are often started at boot time, are run as root
or some other special user (e.g. jenkins) and handle system tasks. Often the
name of a daemon ends in d, as in sshd or crond.

Two general requirements of a daemon are that it is a child of init and is not
connected to any controlling terminal.

Steps to daemonize:
1) Call fork(), the child (or grand-child if using the double fork trick) will
   become the daemon.
2) In the parent, exit(). This ensures the original parent is satisfied that
   its child terminated, that the daemon's parent is no longer running and the
   daemon is not a process group leader (pgid seems inherited through fork).
3) In the child, call setsid(), giving the daemon a new process group and
   session, both of which it leads. This also ensures the daemon is not linked
   to any terminal (see double fork trick).
4) Change the working directory to the root via chdir(). This prevents a daemon
   (which can have an arbitrary working directory) from keeping a directory
   open forever and preventing a sysadmin from unmounting the filesystem
   containing that directory.
5) Close all file descriptors, the daemon does not want to inherit file
   file descriptors and, unaware, keep them open.
6) Open file descriptors 0, 1, 2 (stdin, stdout, stderr) and redirect them to
   /dev/null.

/*
 * e.g. daemon
 */ 
#include <unistd.h>
#include <sys/types.h>

#include <fcntl.h>
#include <sys/stat.h>

#include <stdio.h>
#include <stdlib.h>

void daemonWork()
{
    printf("hello world\n");
}

int main()
{
    pid_t pid = fork();
    
    if(pid == -1)
    {
        perror("fork");
        return -1;
    }
    else if(pid != 0)
    {
        printf("parent: %d exiting\n", getpid());
        exit(0);
    }

    printf("child: %d started\n", getpid());

    if(setsid() == -1)
    {
        perror("setsid");
        return 1;
    }

    if(chdir("/") == -1)
    {
        perror("chdir");
        return 1;
    }

    // close open file descriptors
    
    // open redirect stdin, stdout, stderr
    open("/dev/null", O_RDWR);
    dup(0);
    dup(0);
    
    daemonWork();

    return 0;
}

Most unix systems have a convenience function in their C library that automates
these steps. 

#include <unistd.h>

/*
 * non-zero values for nochdir or noclose cause the daemon not to change its
 * working directory or close all open file descriptors, but 0, 0 is usually
 * passed in
 *
 * returns 0 on success, -1 on failure
 */
int daemon(int nochdir, int noclose);
